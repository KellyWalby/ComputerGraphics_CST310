#include <GL/glut.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

//Kelly Walby
//Project 4: Render Your Scene with Primitives
//CST-310
//February 24, 2020

//CREATES OBJECTS THOURGH SHAPES & COORDINATES
void displayMe(void)
{


//CEMENT TRIANGLE (RIGHT SIDE)
    glClear(GL_COLOR_BUFFER_BIT);
    glBegin(GL_TRIANGLES); //USES TRIANGLE PRIMITIVE
        glColor3f(0.5924, 0.5294, 0.4431); //RGB:151,135,113
        glVertex3f(1.0, -0.3,0); //TOP RIGHT VERTEX
        glVertex3f(0.54, -0.3,0); //TOP LEFT VERTEX
        glVertex3f(1.0, -0.8,0); //BOTTOM VERTEX
    glEnd();


//RECT. (3D) RIGHT SIDE
   glBegin(GL_POLYGON); //USES POLYGON PRIMITIVE FOR A RECT.
     glColor3f(0.6118,0.5569, 0.4706); //RGB:156,142,120
     glVertex3f(0.54,-0.3,0); //TOP TOP VERTEX
     glVertex3f(0.54,-0.35,0); //TOP BOTTOM VERTEX
     glVertex3f(1.0,-0.8,0); //BOTTOM TOP VERTEX
     glVertex3f(1.0,-0.72,0); //BOTTOM BOTTOM VERTEX
   glEnd();
 

//CEMENT DIRECTLY INFRONT OF CAMERA
  glBegin(GL_POLYGON); //CREATES A RECT. USING POLYGON PRIMITIVE
   glColor3f(0.5686,0.5059,0.4118); //RBG:145,129,105 
   glVertex3f(-1.0,-0.96,0);  //LEFT TOP VERTEX
   glVertex3f(1.0,-0.96,0);  //RIGHT TOP VERTEX 
   glVertex3f(1.0,-1.0,0);  //RIGHT BOTTOM VERTEX
   glVertex3f(-1.0,-1.0,0); //LEFT BOTTOM VERTEX
glEnd();


//CEMENT TRIANGLE (LEFT SIDE) 
glBegin(GL_TRIANGLES);  //USES TRIANGLE PRIMITIVE
        glColor3f(0.6118, 0.5569, 0.4706); //RGB:156,142,120
        glVertex3f(-0.4,0.2,0);  //TOP RIGHT VERTEX
        glVertex3f(-1.0,0.2,0);  //TOP LEFT VERTEX 
        glVertex3f(-1.0,-0.4,0);  //BOTTOM VERTEX
glEnd();


//RECT. (3D) RIGHT SIDE
glBegin(GL_QUADS); //QUAD PRIMITIVE FOR RECT.
   glColor3f(0.5924, 0.5294, 0.4431); //RBG: 151,135,113  
   glVertex3f(-0.4,0.2,0);  //TOP RIGHT VERTEX
   glVertex3f(-0.4,0.15,0);  //BOTTOM RIGHT VERTEX
   glVertex3f(-1.0,-0.4,0);  //TOP LEFT VERTEX 
   glVertex3f(-1.0,-0.32,0);  //BOTTOM LEFT VERTEX
glEnd();


//BACKGROUND CEMENT
glBegin(GL_POLYGON); //CREATES RECT. USING POLGYON PRIMITIVE
  glColor3f(0.6118,0.5569,0.4706); //RBG:156,142,120
  glVertex3f(-1.0, 0.2,0); //LEFT BOTTOM VERTEX
  glVertex3f(1.0, 0.2,0); //RIGHT BOTTOM VERTEX
  glVertex3f(1.0, 0.6,0); //RIGHT TOP VERTEX
  glVertex3f(-1.0,0.6,0); //LEFT TOP VERTEX
glEnd();


//BACK EDGE OF POOL (3D)
glBegin(GL_POLYGON); //CREATES RECT. USING POLGYON PRIMITIVE
  glColor3f(0.5686, 0.5059, 0.4118); //RBG:145,129,105
  glVertex3f(-0.4, 0.15,0); //BOTTOM LEFT VERTEX
  glVertex3f(0.0, 0.15,0); //BOTTOM RIGHT VERTEX
  glVertex3f(0.0, 0.2,0);  //TOP RIGHT VERTEX  
  glVertex3f(-0.4,0.2,0);  //TOP LEFT VERTEX
glEnd();


//SQUARE SECTION OF POOL (TOP)
glBegin(GL_POLYGON); //CREATES RECT. USING POLGYON PRIMITIVE
  glColor3f(0.6118, 0.5569, 0.4706); //RBG:156,142,120
  glVertex3f(0.0, 0.2,0); //TOP LEFT VERTEX
  glVertex3f(0.4, 0.2,0); //TOP RIGHT VERTEX
  glVertex3f(0.74, -0.1,0); //BOTTOM RIGHT VERTEX
  glVertex3f(0.34, -0.1,0); //BOTTOM LEFT VERTEX
glEnd();


//SQUARE PART OF POOL (3D)
glBegin(GL_POLYGON);  //CREATES RECT. USING POLGYON PRIMITIVE
  glColor3f(0.5924, 0.5294, 0.4431); //RBG:151,135,113 
  glVertex3f(0.0, 0.2,0); //BOTTOM LEFT VERTEX
  glVertex3f(0.0, 0.15,0); //BOTTOM RIGHT VERTEX
  glVertex3f(0.34, -0.15,0); //TOP LEFT VERTEX
  glVertex3f(0.34, -0.1,0); //TOP RIGHT VERTEX
glEnd();


//SQUARE PART OF POOL (3D)
glBegin(GL_POLYGON);  //CREATES RECT. USING POLGYON PRIMITIVE
  glColor3f(0.5924, 0.5294, 0.4431); //RBG:151,135,113
  glVertex2f(0.34, -0.1); //RIGHT TOP VERTEX
  glVertex2f(0.34, -0.15); //RIGHT BOTTOM VERTEX 
  glVertex2f(0.74, -.15); //LEFT BOTTOM
  glVertex2f(0.74, -0.1); //LEFT TOP
glEnd();


//RIGHT BACK EDGE OF POOL (3D)
glBegin(GL_POLYGON);  //CREATES RECT. USING POLGYON PRIMITIVE
  glColor3f(0.5686, 0.5059, 0.4118); //RBG:145,129,105
  glVertex3f(0.4, 0.2,0); //RIGHT TOP VERTEX
  glVertex3f(1.0, 0.2,0); //LEFT TOP VERTEX
  glVertex3f(1.0, 0.17,0); //LEFT BOTTOM VERTEX
  glVertex3f(0.43, 0.17,0); //RIGHT BOTTOM VERTEX
glEnd();

//TOP LEFT-MOST SECTION OF DORM BUILDING
glBegin(GL_POLYGON);
   glColor3f(0.9176,0.8784,0.7882);//RGB:206, 181, 126 
   glVertex2f(-.85, 1.0); //TOP RIGHT VERTEX
   glVertex2f(-1.0, 1.0); //TOP LEFT VERTEX
   glVertex2f(-1.0, 0.3); //BOTTOM LEFT VERTEX
   glVertex2f(-0.85, 0.4); //BOTTOM RIGHT VERTEX
glEnd();

//TOP MIDDLE SECTION OF DORM BUILDING (3D)
glBegin(GL_POLYGON);
   glColor3f(0.898,0.847,0.733); //RGB:229,216,187 
   glVertex2f(-0.75, 1.0); //TOP RIGHT VERTEX
   glVertex2f(-0.85, 1.0); //TOP LEFT VERTEX
   glVertex2f(-0.85, 0.4); //BOTTOM LEFT VERTEX
   glVertex2f(-0.75,0.4); //BOTTOM RIGHT VERTEX
glEnd();


//TOP RIGHT SECTION OF DORM BUILDING 
glBegin(GL_POLYGON);
   glColor3f(0.9176,0.8784,0.7882); //RGB:206, 181, 126
   glVertex2f(-0.75, 1.0); //TOP LEFT VERTEX
   glVertex2f(-0.75,0.4); //BOTTOM LEFT VERTEX
   glVertex2f(-0.55,0.4); //BOTTOM RIGHT VERTEX
   glVertex2f(-0.55,0.93); //TOP RIGHT VERTEX
glEnd();


//BOTTOM LEFT-MOST SECTION OF DORM BUILDING 
glBegin(GL_POLYGON);
   glColor3f(0.5569,0.4862,0.4784); //RGB: 142,124,122 
   glVertex2f(-1.0, 0.32); //TOP LEFT VERTEX
   glVertex2f(-1.0, 0); //BOTTOM LEFT VERTEX
   glVertex2f(-.85, 0.13); //BOTTOM RIGHT VERTEX
   glVertex2f(-0.85, 0.42); //TOP RIGHT VERTEX
glEnd();

//BOTTOM MIDDLE SECTION OF DORM BUILDING (3D)
glBegin(GL_POLYGON);
   glColor3f(0.4471,0.3569,0.3490);
   glVertex2f(-0.85, 0.42); //TOP LEFT VERTEX
   glVertex2f(-.85, 0.13); //BOTTOM LEFT VERTEX
   glVertex2f(-0.75,0.215); //BOTTOM RIGHT VERTEX
   glVertex2f(-0.75,0.42); //TOP RIGHT VERTEX
glEnd();
 
//BOTTOM RIGHT SECTION OF DORM BUILDING
glBegin(GL_POLYGON);
  glColor3f(0.5569,0.4862,0.4784); //RGB: 142,124,122
  glVertex2f(-0.75,0.215); //BOTTOM LEFT VERTEX
  glVertex2f(-0.75,0.42); //TOP LEFT VERTEX
  glVertex2f(-0.55,0.56); //TOP RIGHT VERTEX
  glVertex2f(-0.55,0.4); //BOTTOM RIGHT VERTEX
glEnd();

//INDENT OF RIGHT SECTION OF DORM BUILDING
glBegin(GL_POLYGON);
  glColor3f(0.898,0.847,0.733); //RGB:
  glVertex2f(-0.65,0.55); //BOTTOM LEFT VERTEX
  glVertex2f(-0.65,0.9); //TOP LEFT VERTEX
  glVertex2f(-0.6,0.89); //TOP RIGHT VERTEX
  glVertex2f(-0.6,0.58); //BOTTOM RIGHT VERTEX
glEnd();

//TOP WINDOW ON LEFT SECTION DORM BUILDING
glBegin(GL_POLYGON);
  glColor3f(0.50196,0.4980,0.50196); //RGB:128,127,128
  glVertex2f(-0.98,0.7); //BOTTOM LEFT VERTEX
  glVertex2f(-0.98,0.9); //TOP LEFT VERTEX
  glVertex2f(-0.88,0.9); //TOP RIGHT VERTEX
  glVertex2f(-0.88,0.73); //BOTTOM RIGHT VERTEX
glEnd();

//TOP WINDOW ON LEFT SECTION DORM BUILDING (3D)
glBegin(GL_POLYGON);
  glColor3f(0.90196,0.8549,0.7451); //RGB: 230,218,190
  glVertex2f(-0.88,0.9); //TOP RIGHT VERTEX
  glVertex2f(-0.88,0.73); //BOTTOM RIGHT VERTEX
  glVertex2f(-0.9,0.72); //BOTTOM LEFT VERTEX
  glVertex2f(-0.9,0.9); //TOP LEFT VERTEX
glEnd();


//BOTTOM WINDOW ON LEFT SECTION DORM BUILDING
glBegin(GL_POLYGON);
  glColor3f(0.50196,0.4980,0.50196); //RGB:128,127,128
  glVertex2f(-0.98,0.45); //BOTTOM LEFT VERTEX 
  glVertex2f(-0.98,0.65); //TOP LEFT VERTEX 
  glVertex2f(-0.88,0.68); //TOP RIGHT VERTEX
  glVertex2f(-0.88,0.5); //BOTTOM RIGHT VERTEX
glEnd();


//BOTTOM WINDOW ON LEFT DORM BUILDING (3D)
glBegin(GL_POLYGON);
  glColor3f(0.90196,0.8549,0.7451); //RGB: 230,218,190
  glVertex2f(-0.88,0.68); //TOP LEFT VERTEX
  glVertex2f(-0.88,0.5); //BOTTOM RIGHT VERTEX
  glVertex2f(-0.9,0.49); //BOTTOM LEFT VERTEX
  glVertex2f(-0.9,0.68); //TOP RIGHT VERTEX
glEnd();


//TOP WINDOW ON LEFT END SECTION
glBegin(GL_POLYGON);
  glColor3f(0.50196,0.4980,0.50196); //RGB:128,127,128
  glVertex2f(-0.74,0.75);  //BOTTOM LEFT VERTEX
  glVertex2f(-0.74,0.91); //TOP LEFT VERTEX
  glVertex2f(-0.68,0.89); //TOP RIGHT VERTEX
  glVertex2f(-0.68,0.77); // BOTTOM RIGHT VERTEX
glEnd();


//TOP WINDOW ON LEFT END SECTION (3D)
glBegin(GL_POLYGON);
  glColor3f(0.90196,0.8549,0.7451); //RGB: 230,218,190 
  glVertex2f(-0.7,0.76); //BOTTOM LEFT VERTEX
  glVertex2f(-0.7,0.9); //TOP LEFT VERTEX
  glVertex2f(-0.68,0.89); //TOP RIGHT VERTEX
  glVertex2f(-0.68,0.77); // BOTTOM RIGHT VERTEX
glEnd();

//BOTTOM WINDOW ON LEFT END SECTION
glBegin(GL_POLYGON);
  glColor3f(0.50196,0.4980,0.50196); //RGB:128,127,128
  glVertex2f(-0.74,0.56);  //BOTTOM LEFT VERTEX
  glVertex2f(-0.74,0.7); //TOP LEFT VERTEX
  glVertex2f(-0.68,0.72); //TOP RIGHT VERTEX
  glVertex2f(-0.68,0.58); // BOTTOM RIGHT VERTEX
glEnd();


//BOTTOM WINDOW ON LEFT END SECTION (3D)
glBegin(GL_POLYGON);
  glColor3f(0.90196,0.8549,0.7451); //RGB: 230,218,190
  glVertex2f(-0.7,0.57); //BOTTOM LEFT VERTEX
  glVertex2f(-0.7,0.715); //TOP LEFT VERTEX
  glVertex2f(-0.68,0.72); //TOP RIGHT VERTEX
  glVertex2f(-0.68,0.58); // BOTTOM RIGHT VERTEX
glEnd();


//TOP WINDOW OF RIGHT END SECTION
glBegin(GL_POLYGON);
   glColor3f(0.50196,0.4980,0.50196); //RGB:128,127,128
   glVertex2f(-0.58,0.78); //BOTTOM LEFT CORNER
   glVertex2f(-0.58,0.87); //TOP LEFT CORNER
   glVertex2f(-0.56,0.873); //TOP RIGHT CORNER
   glVertex2f(-0.56,.79); //BOTTOM RIGHT CORNER
glEnd();


//BOTTOM WINDOW OF RIGHT END SECTION
glBegin(GL_POLYGON);
  glColor3f(0.50196,0.4980,0.50196); //RGB:128,127,128
  glVertex2f(-0.58,0.62); //BOTTOM LEFT CORNER
  glVertex2f(-0.58,0.73); //TOP LEFT CORNER
  glVertex2f(-0.56,0.735); //TOP RIGHT CORNER
  glVertex2f(-0.56,.63); //BOTTOM RIGHT CORNER
glEnd();


//POOL WATER
glBegin(GL_POLYGON); //CREATES RECT. USING POLGYON PRIMITIVE
  glColor3f(0.5098, 0.6588, 0.655); //RBG:130,168,167
  glVertex2f(-0.4, 0.15); //RIGHT TOP VERTEX
  glVertex2f(0.0,0.15); //MIDDLE TOP VERTEX
  glVertex2f(.34, -0.15); //LEFT BOTTOM VERTEX
  glVertex2f(-1.0, -0.4); //RIGHT-MOST BOTTOM VERTEX
glEnd();

//POOL WATER
glBegin(GL_POLYGON); //CREATES RECT. USING POLGYON PRIMITIVE
  glColor3f(0.5098, 0.6588, 0.655); //RBG:130,168,167
  glVertex2f(-1.0, -0.4); //LEFT TOP VERTEX
  glVertex2f(.34, -0.15); //MIDDLE TOP VERTEX
  glVertex2f(1.0,-0.8); //RIGHT BOTTOM VERTEX 
  glVertex2f(-1.0,-0.8); //LEFT BOTTOM VERTEX
glEnd();

//POOL WATER
glBegin(GL_POLYGON); //CREATES RECT. USING POLGYON PRIMITIVE
  glColor3f(0.5098, 0.6588, 0.655); //RBG:130,168,167
  glVertex2f(1.0, -0.96); //RIGHT BOTTOM VERTEX
  glVertex2f(1.0,-0.8); //RIGHT TOP VERTEX
  glVertex2f(-1.0,-0.8); //LEFT TOP VERTEX
  glVertex2f(-1.0, -0.96); //LEFT BOTTOM VERTEX
glEnd();

//POOL WATER
glBegin(GL_POLYGON); //CREATES RECT. USING POLGYON PRIMITIVE
  glColor3f(0.5098, 0.6588, 0.655); //RBG:130,168,167
  glVertex2f(.34,-0.15); //LEFT BOTTOM VERTEX
  glVertex2f(0.54, -0.35); //RIGHT BOTTOM VERTEX
  glVertex2f(0.54,-0.3); //RIGHT TOP VERTEX
glEnd();

//POOL WATER
glBegin(GL_POLYGON); //CREATES RECT. USING POLGYON PRIMITIVE
  glColor3f(0.5098, 0.6588, 0.655); //RBG:130,168,167
  glVertex2f(.34,-0.15); //RIGHT TOP VERTEX
  glVertex2f(0.74, -0.15); //LEFT TOP VERTEX
  glVertex2f(1.0,-0.3); //LEFT BOTTOM VERTEX
  glVertex2f(0.54, -0.3); //RIGHT BOTTOM VERTEX
glEnd();

//POOL WATER
glBegin(GL_POLYGON); //CREATES RECT. USING POLGYON PRIMITIVE
  glColor3f(0.5098, 0.6588, 0.655); //RBG:130,168,167
  glVertex2f(1.0,-0.3); //LEFT BOTTOM VERTEX
  glVertex2f(0.74,-0.15); //RIGHT TOP VERTEX
  glVertex2f(1.0,-0.15); //LEFT TOP VERTEX
glEnd();

//POOL WATER
glBegin(GL_POLYGON); //CREATES RECT. USING POLGYON PRIMITIVE
  glColor3f(0.5098, 0.6588, 0.655); //RBG:130,168,167
  glVertex2f(0.43, 0.17); //LEFT TOP VERTEX
  glVertex2f(1.0, 0.17); //RIGHT TOP VERTEX
  glVertex2f(1.0, -0.1); //RIGHT BOTTOM VERTEX
  glVertex2f(0.74, -0.1); //LEFT BOTTOM VERTEX
glEnd();

//POOL WATER
glBegin(GL_POLYGON); //CREATES RECT. USING POLGYON PRIMITIVE
  glColor3f(0.5098, 0.6588, 0.655); //RBG:130,168,167
  glVertex2f(0.74,-0.15); //LEFT BOTTOM VERTEX
  glVertex2f(1.0,-0.15); //RIGHT BOTTOM VERTEX
  glVertex2f(1.0,-0.1); //RIGHT TOP VERTEX
  glVertex2f(0.74,-0.1); //LEFT TOP VERTEX
glEnd();

//STAIRS ON THE RIGHT SIDE OF THE POOL (3D)
glBegin(GL_POLYGON);
  glColor3f(0.49412,0.50588,0.4980); //RGB:126,129,127
  glVertex2f(1.0,-0.96); //BOTTOM RIGHT VERTEX
  glVertex2f(1.0,-0.8); //MIDDLE LEFT VERTEX
  glVertex2f(0.85,-0.65); //TOP RIGHT VERTEX
  glVertex2f(0.65,-0.65); //TOP LEFT VERTEX
  glVertex2f(0.91,-0.96); //BOTTOM LEFT VERTEX
glEnd();

//STAIRS ON THE RIGHT SIDE OF THE POOL (3D)
glBegin(GL_POLYGON);
  glColor3f(0.5176,0.5294,0.5217); //132,135,133
  glVertex2f(0.65,-0.83); //BOTTOM TOP VERTEX
  glVertex2f(0.65,-0.65); //TOP TOP VERTEX
  glVertex2f(0.91,-0.960); //TOP BOTTOM VERTEX
  glVertex2f(0.74,-0.96); //BOTTOM BOTTOM VERTEX
glEnd();

//STAIRS ON LEFT SIDE OF POOL
glBegin(GL_TRIANGLES);
  glColor3f(0.5176,0.5294,0.5217); //132,135,133
  glVertex2f(-1.0,-0.78); //TOP LEFT VERTEX
  glVertex2f(-0.84,-0.78); //TOP RIGHT VERTEX
  glVertex2f(-1.0,-0.88); //BOTTOM LEFT VERTEX
glEnd();


//STAIRS ON LEFT SIDE OF POOL (3D)
glBegin(GL_POLYGON);
  glColor3f(0.49412,0.50588,0.4980); //RGB:126,129,127
  glVertex2f(-0.84,-0.845); //BOTTOM RIGHT VERTEX
  glVertex2f(-0.84,-0.78); //TOP RIGHT VERTEX
  glVertex2f(-1.0,-0.88); //TOP LEFT VERTEX
  glVertex2f(-1.0,-0.96); //BOTTOM LEFT VERTEX  
glEnd();

glBegin(GL_POLYGON);
  glColor3f(0.5176,0.5294,0.5217); //132,135,133
  glVertex2f(-0.86,-0.96); //BOTTOM RIGHT VERTEX
  glVertex2f(-0.74,-0.845); //TOP RIGHT VERTEX
  glVertex2f(-0.84, -0.845); //TOP LEFT VERTEX
  glVertex2f(-1.0,-0.96); //BOTTOM LEFT VERTEX
glEnd();

glBegin(GL_POLYGON);
  glColor3f(0.49412,0.50588,0.4980); //RGB:126,129,127
  glVertex2f(-0.82,-0.96); //BOTTOM RIGHT VERTEX
  glVertex2f(-0.74,-0.88); //TOP RIGHT VERTEX
  glVertex2f(-0.74,-0.845); //TOP LEFT VERTEX
  glVertex2f(-0.86,-0.96); //BOTTOM LEFT VERTEX
glEnd();
  









//BACKGROUND BUILDING
glBegin(GL_POLYGON);  //CREATES RECT. USING POLGYON PRIMITIVE
  glColor3f(0.5255, 0.4471, 0.4431); //RGB: 134,114,113
  glVertex2f(-0.3, 0.5); //LEFT BOTTOM VERTEX
  glVertex2f(-0.3, 0.64); //LEFT TOP VERTEX
  glVertex2f(1.0, 0.64); //RIGHT TOP VERTEX
  glVertex2f(1.0, 0.5); //RIGHT BOTTOM VERTEX
glEnd();

//ROOF (FRONT SECTION)
glBegin(GL_POLYGON); //CREATES RECT. USING POLGYON PRIMITIVE
  glColor3f(0.3294,0.3255, 0.3412); //RBG:84,83,87
  glVertex2f(-0.38, 0.73); //LEFT TOP VERTEX
  glVertex2f(-0.38, 0.7); //LEFT BOTTOM VERTEX
  glVertex2f(1.0, 0.7); //RIGHT BOTTOM VERTEX
  glVertex2f(1.0, 0.73); //RIGHT TOP VERTEX
glEnd();

//ROOF (BOTTOM SECTION)
glBegin(GL_POLYGON);
  glColor3f(0.3961,0.3922, 0.4078); //RBG:101,100,104
  glVertex2f(-0.38, 0.7); //LEFT TOP VERTEX
  glVertex2f(1.0, 0.7); //RIGHT TOP VERTEX
  glVertex2f(1.0,0.64); //RIGHT  BOTTOM VERTEX
  glVertex2f(-0.27,0.64); //LEFT BOTTOM VERTEX
glEnd();

//LIGHT UNDER ROOF
glBegin(GL_POLYGON);
  glColor3f(1,1,1); //RGB:255,255,255
  glVertex2f(-0.22,0.64); //BOTTOM LEFT VERTEX
  glVertex2f(-0.12,0.64); //BOTTOM RIGHT VERTEX
  glVertex2f(-0.16,0.68); //TOP RIGHT VERTEX
  glVertex2f(-0.26,0.68); //TOP LEFT VERTEX
glEnd();

//LIGHT UNDER ROOF
glBegin(GL_POLYGON);
  glColor3f(1,1,1); //RGB:255,255,255
  glVertex2f(-0.02,0.64); //BOTTOM LEFT VERTEX
  glVertex2f(0.08,0.64); //BOTTOM RIGHT VERTEX
  glVertex2f(0.04,0.68); //TOP RIGHT VERTEX
  glVertex2f(-0.06,0.68); //TOP LEFT VERTEX
glEnd();

//LIGHT UNDER ROOF
glBegin(GL_POLYGON);
  glColor3f(1,1,1); //RGB:255,255,255
  glVertex2f(0.18,0.64); //BOTTOM LEFT VERTEX
  glVertex2f(0.28,0.64); //BOTTOM RIGHT VERTEX
  glVertex2f(0.24,0.68); //TOP RIGHT VERTEX
  glVertex2f(0.14,0.68); //TOP LEFT VERTEX
glEnd();

//LIGHT UNDER ROOF
glBegin(GL_POLYGON);
  glColor3f(1,1,1); //RGB:255,255,255
  glVertex2f(0.38,0.64); //BOTTOM LEFT VERTEX
  glVertex2f(0.48,0.64); //BOTTOM RIGHT VERTEX
  glVertex2f(0.44,0.68); //TOP RIGHT VERTEX
  glVertex2f(0.34,0.68); //TOP LEFT VERTEX
glEnd();

//LIGHT UNDER ROOF
glBegin(GL_POLYGON);
  glColor3f(1,1,1); //RGB:255,255,255
  glVertex2f(0.58,0.64); //BOTTOM LEFT VERTEX
  glVertex2f(0.68,0.64); //BOTTOM RIGHT VERTEX
  glVertex2f(0.64,0.68); //TOP RIGHT VERTEX
  glVertex2f(0.54,0.68); //TOP LEFT VERTEX
glEnd();

//LIGHT UNDER ROOF
glBegin(GL_POLYGON);
  glColor3f(1,1,1); //RGB:255,255,255
  glVertex2f(0.78,0.64); //BOTTOM LEFT VERTEX
  glVertex2f(0.88,0.64); //BOTTOM RIGHT VERTEX
  glVertex2f(0.84,0.68); //TOP RIGHT VERTEX
  glVertex2f(0.74,0.68); //TOP LEFT VERTEX
glEnd();


//DISABILITY CHAIR (BODY)
glBegin(GL_TRIANGLES); //CREATES TRIANGLE USING TRIANGLE PRIMITIVE
  glColor3f(0.1647,0.2627,0.4706); //RBG: 42,67,120
  glVertex2f(-0.2,0.55); //MIDDLE TOP VERTEX
  glVertex2f(-0.3, 0.3); //LEFT BOTTOM VERTEX
  glVertex2f(-0.1, 0.3); //RIGHT BOTTOM VERTEX
glEnd();

glLineWidth(2); //CHANGES GL_LINES WIDTH TO 2 

//DISABILITY CHAIR (LEGS)
glBegin(GL_LINES); //CREATES LEGS WITH LINE PRIMITIVE
  glColor3f(0, 0, 0); //RBG:0,0,0
  glVertex2f(-0.28, 0.3); //TOP VERTEX
  glVertex2f(-0.28, 0.26); //BOTTOM VERTEX
glEnd();

//CHAIR LEGS
glBegin(GL_LINES); //CREATES LEGS WITH LINE PRIMITIVE
  glColor3f(0, 0, 0); //RBG:0,0,0
  glVertex2f(-0.25, 0.3); //TOP VERTEX
  glVertex2f(-0.25, 0.26); //BOTTOM VERTEX
glEnd();

//CHAIR LEGS
glBegin(GL_LINES); //CREATES LEGS WITH LINE PRIMITIVE
  glColor3f(0, 0, 0); //RBG:0,0,0
  glVertex2f(-0.15, 0.3); //TOP VERTEX
  glVertex2f(-0.15, 0.26); //BOTTOM VERTEX
glEnd();


//CHAIR LEGS
glBegin(GL_LINES); //CREATES LEGS WITH LINE PRIMITIVE
  glColor3f(0, 0, 0); //RBG:0,0,0
  glVertex2f(-0.12, 0.3); //TOP VERTEX
  glVertex2f(-0.12, 0.26); //BOTTOM VERTEX
glEnd();
  

glLineWidth(3.5); //CHANGES GL_LINES WIDTH TO 3.5

//FENCE (HORIZONTAL LINE)
glBegin(GL_LINES); //CREATES LINE WITH LINE PRIMITIVE
   glColor3f(0.5981, 0.5765, 0.6); //RBG:152,147,153 
   glVertex2f(-0.43, 0.61); //TOP VERTEX
   glVertex2f(-1.0, 0.2); //BOTTOM VERTEX
glEnd();

//BACKGROUND BUILDING (SIDE)
glBegin(GL_POLYGON); //CREATES RECT. USING POLGYON PRIMITIVE
  glColor3f(0.549,0.4745, 0.4706); //RGB: 140,121,120
  glVertex2f(-0.43, 0.71); //LEFT TOP VERTEX
  glVertex2f(-0.3, 0.64); //RIGHT TOP VERTEX 
  glVertex2f(-0.3, 0.5); //RIGHT BOTTOM VERTEX 
  glVertex2f(-0.43, 0.39); //LEFT BOTTOM VERTEX
glEnd();

//SIDE OF BACKGROUND BUILDING (3D)
glBegin(GL_POLYGON); //CREATES RECT. USING POLGYON PRIMITIVE
  glColor3f(0.5255, 0.4471, 0.4431); //RGB: 134,114,113
  glVertex2f(-0.43, 0.71); //RIGHT TOP VERTEX
  glVertex2f(-0.43, 0.39); //RIGHT BOTTOM VERTEX
  glVertex2f(-0.46, 0.39); //LEFT BOTTOM VERTEX
  glVertex2f(-0.46, 0.71); //LEFT TOP VERTEX
glEnd();


glLineWidth(2.5); //CHANGES GL_LINES WIDTH TO 2.5

//FENCE LINE (VERTICAL, THICK)
glBegin(GL_LINES); //CREATES FENCE LINES USING LINE PRIMITIVE
   glColor3f(0.5981, 0.5765, 0.6); //RBG:152,147,153
   glVertex2f(-0.5, 0.55); //TOP VERTEX
   glVertex2f(-0.5, 0.38); //BOTTOM VERTEX
glEnd();

//FENCE LINE (VERTICAL, THICK)
glBegin(GL_LINES);  //CREATES FENCE LINES USING LINE PRIMITIVE
   glColor3f(0.5981, 0.5765, 0.6); //RBG:152,147,153
   glVertex2f(-0.6, 0.48); //TOP VERTEX
   glVertex2f(-0.6, 0.29); //BOTTOM VERTEX
glEnd();

//FENCE LINE (VERTICAL, THICK)
glBegin(GL_LINES);   //CREATES FENCE LINES USING LINE PRIMITIVE
   glColor3f(0.5981, 0.5765, 0.6); //RBG:152,147,153
   glVertex2f(-0.7, 0.41); //TOP VERTEX
   glVertex2f(-0.7, 0.2); //BOTTOM VERTEX
glEnd();

//FENCE LINE (VERTICAL, THICK)
glBegin(GL_LINES);  //CREATES FENCE LINES USING LINE PRIMITIVE
   glColor3f(0.5981, 0.5765, 0.6); //RBG:152,147,153
   glVertex2f(-0.8, 0.34); //TOP VERTEX
   glVertex2f(-0.8, 0.1); //BOTTOM VERTEX
glEnd();

//FENCE LINE (VERTICAL, THICK)
glBegin(GL_LINES);  //CREATES FENCE LINES USING LINE PRIMITIVE
   glColor3f(0.5981, 0.5765, 0.6); //RBG:152,147,153
   glVertex2f(-0.9, 0.27); //TOP VERTEX
   glVertex2f(-0.9, 0.0); //BOTTOM VERTEX
glEnd();



glLineWidth(1); //CHANGES GL_LINES WIDTH TO 1

//FENCE LINE (VERTICAL, THIN)
//LINES BETWEEN -0.4 & -0.5 (X-DIRECTION) 
glBegin(GL_LINES); //CREATES FENCE LINES USING LINE PRIMITIVE
  glColor3f(0.5981, 0.5765, 0.6); //RBG:152,147,153
  glVertex2f(-0.465, 0.58); //TOP VERTEX
  glVertex2f(-0.465, 0.4); //BOTTOM VERTEX
glEnd();

//FENCE LINE (VERTICAL, THIN)
glBegin(GL_LINES); //CREATES FENCE LINES USING LINE PRIMITIVE
  glColor3f(0.5981, 0.5765, 0.6); //RBG:152,147,153
  glVertex2f(-0.48, 0.57); //TOP VERTEX
  glVertex2f(-0.48, 0.4); //BOTTOM VERTEX
glEnd();


//FENCE LINE (VERTICAL, THIN)
//LINES BETWEEN -0.5 and -0.6 (X-DIRECTION) 
glBegin(GL_LINES); //CREATES FENCE LINES USING LINE PRIMITIVE
  glColor3f(0.5981, 0.5765, 0.6); //RBG:152,147,153
  glVertex2f(-0.52, 0.54); //TOP VERTEX
  glVertex2f(-0.52, 0.3); //BOTTOM VERTEX
glEnd();

//FENCE LINE (VERTICAL, THIN)
glBegin(GL_LINES); //CREATES FENCE LINES USING LINE PRIMITIVE
  glColor3f(0.5981, 0.5765, 0.6); //RBG:152,147,153
  glVertex2f(-0.535, 0.54); //TOP VERTEX
  glVertex2f(-0.535, 0.3); //BOTTOM VERTEX
glEnd();

//FENCE LINE (VERTICAL, THIN)
glBegin(GL_LINES); //CREATES FENCE LINES USING LINE PRIMITIVE
  glColor3f(0.5981, 0.5765, 0.6); //RBG:152,147,153
  glVertex2f(-0.55, 0.52); //TOP VERTEX
  glVertex2f(-0.55, 0.3); //BOTTOM VERTEX
glEnd();

//FENCE LINE (VERTICAL, THIN)
glBegin(GL_LINES); //CREATES FENCE LINES USING LINE PRIMITIVE
  glColor3f(0.5981, 0.5765, 0.6); //RBG:152,147,153
  glVertex2f(-0.565, 0.51); //TOP VERTEX
  glVertex2f(-0.565, 0.3); //BOTTOM VERTEX
glEnd();

//FENCE LINE (VERTICAL, THIN)
glBegin(GL_LINES); //CREATES FENCE LINES USING LINE PRIMITIVE
  glColor3f(0.5981, 0.5765, 0.6); //RBG:152,147,153
  glVertex2f(-0.58, 0.5);
  glVertex2f(-0.58, 0.31);
glEnd();

//FENCE LINE (VERTICAL, THIN)
//lines between -0.6 and -0.7 (x direction) 
glBegin(GL_LINES); //CREATES FENCE LINES USING LINE PRIMITIVE
  glColor3f(0.5981, 0.5765, 0.6); //RBG:152,147,153
  glVertex2f(-0.62, 0.48); //TOP VERTEX
  glVertex2f(-0.62, 0.2); //BOTTOM VERTEX
glEnd();

//FENCE LINE (VERTICAL, THIN)
glBegin(GL_LINES); //CREATES FENCE LINES USING LINE PRIMITIVE
  glColor3f(0.5981, 0.5765, 0.6); //RBG:152,147,153
  glVertex2f(-0.635, 0.47); //TOP VERTEX
  glVertex2f(-0.635, 0.18); //BOTTOM VERTEX
glEnd();

//FENCE LINE (VERTICAL, THIN)
glBegin(GL_LINES); //CREATES FENCE LINES USING LINE PRIMITIVE
  glColor3f(0.5981, 0.5765, 0.6); //RBG:152,147,153
  glVertex2f(-0.65, 0.46); //TOP VERTEX
  glVertex2f(-0.65, 0.17); //BOTTOM VERTEX
glEnd();

//FENCE LINE (VERTICAL, THIN)
glBegin(GL_LINES); //CREATES FENCE LINES USING LINE PRIMITIVE
  glColor3f(0.5981, 0.5765, 0.6); //RBG:152,147,153
  glVertex2f(-0.665, 0.44); //TOP VERTEX
  glVertex2f(-0.665, 0.15); //BOTTOM VERTEX
glEnd();

//FENCE LINE (VERTICAL, THIN)
glBegin(GL_LINES); //CREATES FENCE LINES USING LINE PRIMITIVE
  glColor3f(0.5981, 0.5765, 0.6); //RBG:152,147,153
  glVertex2f(-0.68, 0.43); //TOP VERTEX
  glVertex2f(-0.68, 0.14); //BOTTOM VERTEX
glEnd();

//FENCE LINE (VERTICAL, THIN)
//lines between -0.7 and -0.8 (x direction) 
glBegin(GL_LINES); //CREATES FENCE LINES USING LINE PRIMITIVE
  glColor3f(0.5981, 0.5765, 0.6); //RBG:152,147,153
  glVertex2f(-0.72, 0.4); //TOP VERTEX
  glVertex2f(-0.72, 0.1); //BOTTOM VERTEX
glEnd();

//FENCE LINE (VERTICAL, THIN)
glBegin(GL_LINES); //CREATES FENCE LINES USING LINE PRIMITIVE
  glColor3f(0.5981, 0.5765, 0.6); //RBG:152,147,153
  glVertex2f(-0.735, 0.4); //TOP VERTEX
  glVertex2f(-0.735, 0.08); //BOTTOM VERTEX
glEnd();

//FENCE LINE (VERTICAL, THIN)
glBegin(GL_LINES); //CREATES FENCE LINES USING LINE PRIMITIVE
  glColor3f(0.5981, 0.5765, 0.6); //RBG:152,147,153
  glVertex2f(-0.75, 0.37);
  glVertex2f(-0.75, 0.07);
glEnd();

//FENCE LINE (VERTICAL, THIN)
glBegin(GL_LINES); //CREATES FENCE LINES USING LINE PRIMITIVE
  glColor3f(0.5981, 0.5765, 0.6); //RBG:152,147,153
  glVertex2f(-0.765, 0.37); //TOP VERTEX
  glVertex2f(-0.765, 0.05); //BOTTOM VERTEX
glEnd();

//FENCE LINE (VERTICAL, THIN)
glBegin(GL_LINES); //CREATES FENCE LINES USING LINE PRIMITIVE
  glColor3f(0.5981, 0.5765, 0.6); //RBG:152,147,153
  glVertex2f(-0.78, 0.35); //TOP VERTEX
  glVertex2f(-0.78, 0.04); //BOTTOM VERTEX
glEnd();

//FENCE LINE (VERTICAL, THIN)
//LINES BETWEEN -0.8 and -0.9 (X-DIRECTION) 
glBegin(GL_LINES); //CREATES FENCE LINES USING LINE PRIMITIVE
  glColor3f(0.5981, 0.5765, 0.6); //RBG:152,147,153
  glVertex2f(-0.82, 0.33); //TOP VERTEX
  glVertex2f(-0.82, 0.1); //BOTTOM VERTEX
glEnd();

//FENCE LINE (VERTICAL, THIN)
glBegin(GL_LINES); //CREATES FENCE LINES USING LINE PRIMITIVE
  glColor3f(0.5981, 0.5765, 0.6); //RBG:152,147,153
  glVertex2f(-0.835, 0.32); //TOP VERTEX
  glVertex2f(-0.835, 0.08); //BOTTOM VERTEX
glEnd();

//FENCE LINE (VERTICAL, THIN)
glBegin(GL_LINES); //CREATES FENCE LINES USING LINE PRIMITIVE
  glColor3f(0.5981, 0.5765, 0.6); //RBG:152,147,153
  glVertex2f(-0.85, 0.31);
  glVertex2f(-0.85, 0.07);
glEnd();

//FENCE LINE (VERTICAL, THIN)
glBegin(GL_LINES); //CREATES FENCE LINES USING LINE PRIMITIVE
  glColor3f(0.5981, 0.5765, 0.6); //RBG:152,147,153
  glVertex2f(-0.865, 0.29); //TOP VERTEX
  glVertex2f(-0.865, 0.05); //BOTTOM VERTEX
glEnd();

//FENCE LINE (VERTICAL, THIN)
glBegin(GL_LINES); //CREATES FENCE LINES USING LINE PRIMITIVE
  glColor3f(0.5981, 0.5765, 0.6); //RBG:152,147,153
  glVertex2f(-0.88, 0.28); //TOP VERTEX
  glVertex2f(-0.88, 0.04); //BOTTOM VERTEX
glEnd();

//FENCE LINE (VERTICAL, THIN)
//LINES BETWEEN -0.9 and -1.0 (X-DIRECTION) 
glBegin(GL_LINES); //CREATES FENCE LINES USING LINE PRIMITIVE
  glColor3f(0.5981, 0.5765, 0.6); //RBG:152,147,153
  glVertex2f(-0.92, 0.26); //TOP VERTEX
  glVertex2f(-0.92, 0.0); //BOTTOM VERTEX
glEnd();

//FENCE LINE (VERTICAL, THIN)
glBegin(GL_LINES); //CREATES FENCE LINES USING LINE PRIMITIVE
  glColor3f(0.5981, 0.5765, 0.6); //RBG:152,147,153
  glVertex2f(-0.935, 0.25); //TOP VERTEX
  glVertex2f(-0.935, -0.02); //BOTTOM VERTEX
glEnd();

//FENCE LINE (VERTICAL, THIN)
glBegin(GL_LINES); //CREATES FENCE LINES USING LINE PRIMITIVE
  glColor3f(0.5981, 0.5765, 0.6); //RBG:152,147,153
  glVertex2f(-0.95, 0.24); //TOP VERTEX
  glVertex2f(-0.95, -0.04); //BOTTOM VERTEX
glEnd();

//FENCE LINE (VERTICAL, THIN)
glBegin(GL_LINES); //CREATES FENCE LINES USING LINE PRIMITIVE
  glColor3f(0.5981, 0.5765, 0.6); //RBG:152,147,153
  glVertex2f(-0.965, 0.23); //TOP VERTEX
  glVertex2f(-0.965, -0.06); //BOTTOM VERTEX
glEnd();

//FENCE LINE (VERTICAL, THIN)
glBegin(GL_LINES); //CREATES FENCE LINES USING LINE PRIMITIVE
  glColor3f(0.5981, 0.5765, 0.6); //RBG:152,147,153
  glVertex2f(-0.98, 0.22); //TOP VERTEX
  glVertex2f(-0.98, -0.08); //BOTTOM VERTEX
glEnd();

//BRICK UNDER FENCE
glBegin(GL_POLYGON); //CREATES RECT. USING POLYGON PRIMITIVE
  glColor3f(0.3843, 0.2863, 0.2784); //RGB: 98, 73, 71
  glVertex2f(-0.43, 0.39); //RIGHT BOTTOM VERTEX 
  glVertex2f(-1.0, -0.18); //LEFT BOTTOM VERTEX
  glVertex2f(-1.0, -0.07); //LEFT TOP VERTEX
  glVertex2f(-0.43, 0.45); //RIGHT TOP VERTEX
glEnd();

//BRICK UNDER FENCE (3D ILLUSION)
glBegin(GL_POLYGON); //CREATES RECT. USING POLYGON PRIMITIVE
  glColor3f(0.4157, 0.3216, 0.3137); //RGB: 106, 82, 80
  glVertex2f(-1.0, -0.07); //LEFT BOTTOM VERTEX 
  glVertex2f(-0.43, 0.45); //RIGHT TOP VERTEX
  glVertex2f(-0.46,0.45);  //RIGHT-MOST VERTEX
  glVertex2f(-1.0, -0.03); //LEFT TOP VERTEX
glEnd();

//DETAILS ON BACKGROUND BUILDING
//FIRST GRAY DOOR
glBegin(GL_POLYGON); //CREATES RECT. USING POLYGON PRIMITIVE
  glColor3f(0.6392,0.5961,0.6549); //RGB: 163,152,167
  glVertex2f(0,0.5); //BOTTOM LEFT VERTEX
  glVertex2f(0.08,0.5); //BOTTOM RIGHT VERTEX
  glVertex2f(0.08,0.64); //TOP RIGHT VERTEX
  glVertex2f(0,0.64); //TOP LEFT VERTEX
glEnd();


//SECOND GRAY DOOR
glBegin(GL_POLYGON); //CREATES RECT. USING POLYGON PRIMITIVE
  glColor3f(0.7901,0.7412,0.8824); //RGB:203,189,225
  glVertex2f(0.31,0.5); //BOTTOM LEFT VERTEX
  glVertex2f(0.45,0.5); //BOTTOM RIGHT VERTEX
  glVertex2f(0.45,0.62); //TOP RIGHT VERTEX
  glVertex2f(0.31,0.62); //TOP LEFT VERTEX
glEnd();

//THIRD GRAY DOOR
glBegin(GL_POLYGON); //CREATES RECT. USING POLYGON PRIMITIVE 
  glColor3f(0.8235,0.8078,0.8353); //RBG: 210,206,213
  glVertex2f(0.7,0.5); //BOTTOM LEFT VERTEX
  glVertex2f(0.89,0.5); //BOTTOM RIGHT VERTEX
  glVertex2f(0.89,0.64); //TOP RIGHT VERTEX
  glVertex2f(0.7,0.64); //TOP LEFT VERTEX
glEnd();


glLineWidth(3); //CHANGES GL_LINES WIDTH TO 3

//FLAG POLE
glBegin(GL_LINES); //CREATES LINE USING LINE PRIMITIVE
  glColor3f(0.5981, 0.5765, 0.6); //RBG:
  glVertex2f(0.4,0.0); //BOTTOM VERTEX
  glVertex2f(0.4,.725); //TOP VERTEX
glEnd();


glLineWidth(1); //CHANGE GL_LINE WIDTH TO 1

//STRING ON FLAG POLE
glBegin(GL_LINES); //CREATES LINE USING LINE PRIMITIVE
  glColor3f(0.3294,0.3255, 0.3412); //RBG:84,83,87
  glVertex2f(0.4,0.725); //LEFT VERTEX
  glVertex2f(1.0,0.725); //RIGHT VERTEX
glEnd();

//PURPLE FLAG
glBegin(GL_TRIANGLES); //CREATES FLAG USING TRIANGLE PRIMITIVE
  glColor3f(0.333, 0.314, 0.631); //RGB:85,80,161
  glVertex3f(0.425, 0.725,0); //RIGHT VERTEX
  glVertex3f(0.4625, 0.625,0); //MIDDLE VERTEX
  glVertex3f(0.5, 0.725,0); //LEFT VERTEX
glEnd();

//PURPLE FLAG
glBegin(GL_TRIANGLES); //CREATES FLAG USING TRIANGLE PRIMITIVE
  glColor3f(0.333, 0.314, 0.631); //RGB:85,80,161
  glVertex2f(0.5, 0.725); //LEFT VERTEX
  glVertex2f(0.5375, 0.625); //MIDDLE VERTEX
  glVertex2f(0.575, 0.725); //RIGHT VERTEX
glEnd();

//PURPLE FLAG
glBegin(GL_TRIANGLES);  //CREATES FLAG USING TRIANGLE PRIMITIVE
  glColor3f(0.333, 0.314, 0.631); //RGB:85,80,161
  glVertex2f(0.575, 0.725); //LEFT VERTEX
  glVertex2f(0.6125, 0.625); //MIDDLE VERTEX
  glVertex2f(0.650, 0.725); //RIGHT VERTEX
glEnd();

//PURPLE FLAG
glBegin(GL_TRIANGLES); //CREATES FLAG USING TRIANGLE PRIMITIVE
  glColor3f(0.333, 0.314, 0.631); //RGB:85,80,161
  glVertex2f(0.650, 0.725); //LEFT VERTEX
  glVertex2f(0.6875, 0.625); //MIDDLE VERTEX
  glVertex2f(0.725, 0.725); //RIGHT VERTEX
glEnd();

//PURPLE FLAG
glBegin(GL_TRIANGLES); //CREATES FLAG USING TRIANGLE PRIMITIVE
  glColor3f(0.333, 0.314, 0.631); //RGB:85,80,161
  glVertex2f(0.725, 0.725); //LEFT VERTEX
  glVertex2f(0.7625, 0.625); //MIDDLE VERTEX
  glVertex2f(0.8, 0.725); //RIGHT VERTEX
glEnd();

//PURPLE FLAG
glBegin(GL_TRIANGLES); //CREATES FLAG USING TRIANGLE PRIMITIVE
  glColor3f(0.333, 0.314, 0.631); //RGB:85,80,161
  glVertex2f(0.8, 0.725); //LEFT VERTEX
  glVertex2f(0.8375, 0.625); //MIDDLE VERTEX
  glVertex2f(0.875, 0.725); //RIGHT VERTEX
glEnd();

//PURPLE FLAG
glBegin(GL_TRIANGLES); //CREATES FLAG USING TRIANGLE PRIMITIVE
  glColor3f(0.333, 0.314, 0.631); //RGB:85,80,161
  glVertex2f(0.875, 0.725); //LEFT VERTEX
  glVertex2f(0.9125, 0.625); //MIDDLE VERTEX
  glVertex2f(0.95,0.725); //RIGHT VERTEX
glEnd();

//PURPLE FLAG
glBegin(GL_POLYGON); //CREATES FLAG USING TRIANGLE PRIMITIVE
  glColor3f(0.333, 0.314, 0.631); //RGB:85,80,161
  glVertex2f(0.95, 0.725); //LEFT VERTEX
  glVertex2f(0.9875, 0.625); //MIDDLE VERTEX
  glVertex2f(1.0,0.667); //RIGHT BOTTOM VERTEX
  glVertex2f(1.0,0.725); //RIGHT BOTTOM VERTEX
glEnd();


glLineWidth(3); //CHANGES GL_LINES WIDTH TO 3

//POOL HANDLE BAR 
//SPILT UP BAR INTO 4 SECTIONS

//SECTION 1 CREATES BAR FROM GROUND
glBegin(GL_LINES); //CREATES LINE USING LINE PRIMITIVE
  glColor3f(0.5981, 0.5765, 0.6); //RBG: 152,147,153
  glVertex2f(-0.52,0.18); //BOTTOM VERTEX
  glVertex2f(-0.52,0.3135); //TOP VERTEX
glEnd();

//SECTION 2 CREATES DIAGONAL LINE FOR HANDLE
glBegin(GL_LINES); //CREATES LINE USING LINE PRIMITIVE
  glColor3f(0.5981, 0.5765, 0.6); //RBG: 152,147,153
  glVertex2f(-0.52,0.31); //TOP VERTEX
  glVertex2f(-0.35,0.25); //BOTTOM VERTEX
glEnd();

//SECTION 3 CREATES LINE GOING BACK TO CEMENT
glBegin(GL_LINES); //CREATES LINE USING LINE PRIMITIVE
  glColor3f(0.5981, 0.5765, 0.6); //RBG: 152,147,153
  glVertex2f(-0.35,0.25); //RIGHT VERTEX
  glVertex2f(-0.48, 0.25); //LEFT VERTEX
glEnd();

//SECTION 4 CONNECTS HANDLE TO GROUND 
glBegin(GL_LINES); //CREATES LINE USING LINE PRIMITIVE 
  glColor3f(0.5981, 0.5765, 0.6); //RBG: 152,147,153
  glVertex2f(-0.48, 0.25); //TOP VERTEX
  glVertex2f(-0.48, 0.18); //BOTTOM VERTEX
glEnd();

glFlush(); //FORCE EXECUTION OF GL COMMANDS
}

void init(){
glClearColor(0, 0, 0, 1.0); //BACKGROUND TO BLACK FOR SKY
}
 
int main(int argc, char** argv) //Main Function to Execute Program
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE); //ONLY ONE DISPLAY MODE
    glutInitWindowSize(500, 500); //WINDOW SIZE
    glutInitWindowPosition(100, 100); //WINDOW POSITION
    glutCreateWindow("SWIMMING POOL IMAGE"); //NAME OF WINDOW
    glutDisplayFunc(displayMe); //DRAWS EACH OBJECT USING FUNCTIONS
    init(); //RUNS INIT FUNCTION
    glutMainLoop();
    return 0;
}
